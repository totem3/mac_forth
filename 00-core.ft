: >rdi
  X 0x48 X 0x8b X 0x3b        ( MOV RDI, [RBX] )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;

: >rsi
  X 0x48 X 0x8b X 0x33        ( MOV RSI [RBX] )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;

: >rcx
  X 0x48 X 0x8b X 0x0b        ( MOV RCX [RBX] )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;

: >rdx
  X 0x48 X 0x8b X 0x13        ( MOV RDX [RBX] )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;

: rax>
  X 0x48 X 0x83 X 0xeb X 0x08 ( SUB RBX, 8     )
  X 0x48 X 0x89 X 0x03        ( MOV [RBX], RAX )
;

: sp@
  X 0x48 X 0x89 X 0x5b X 0xf8 ( MOV [RBX-8], RBX )
  X 0x48 X 0x83 X 0xeb X 0x08 ( SUB RBX, 8       )
;

: + ( n1 n2 -- n1+n2 )
  X 0x48 X 0x8b X 0x03        ( MOV RAX, [RBX] )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
  X 0x48 X 0x01 X 0x03        ( ADD RAX, [RBX] )
;

: - ( n1 n2 -- n1-n2 )
  X 0x48 X 0x8b X 0x03        ( MOV RAX, [RBX] )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
  X 0x48 X 0x29 X 0x03        ( SUB RAX, [RBX] )
;

: dup ( n -- n n )
  X 0x48 X 0x8b X 0x03        ( MOV RAX [RBX] )
  X 0x48 X 0x89 X 0x03        ( MOV [RBX] RAX )
  X 0x48 X 0x83 X 0xeb X 0x08 ( SUB RBX, 8       )
  X 0x48 X 0x89 X 0x03        ( MOV [RBX] RAX )
;

: drop ( n -- )
  X 0x48 X 0x83 X 0xc3 X 0x08 ( ADD RBX, 8     )
;

: swap ( n1 n0 -- n0 n1 )
  X 0x48 X 0x8b X 0x03        ( MOV RAX [RBX] )
  X 0x48 X 0x87 X 0x43 X 0x08 ( XCGH [RBX+8] RAX)
  X 0x48 X 0x89 X 0x03        ( MOV [RBX] RCX )
;

: over ( n1 n0 -- n1 n0 n1 )
  X 0x48 X 0x8b X 0x43 X 0x08 ( MOV RAX [RBX+8] )
  X 0x48 X 0x83 X 0xeb X 0x08 ( SUB RBX,  8     )
  X 0x48 X 0x89 X 0x03        ( MOV [RBX] RAX )
;

: pick  ( xn ... x1 x0 n -- xn ... x1 x0 xn )
  X 0x48 X 0x8b X 0x03        ( MOV RAX [RBX] )
  X 0x48 X 0x8b X 0x04 X 0xc3   ( mov    rax,QWORD PTR [rbx+rax*8] )
  X 0x48 X 0x89 X 0x03        ( MOV [RBX] RAX )
;

: .
  >rdi print-rdi-as-int
;
